# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Game::MatchesController, type: :controller do
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MatchesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'returns a success response' do
      match = Game::Match.create_initial_match
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      match = Game::Match.create_initial_match
      get :show, params: { id: match.to_param }, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #new' do
    it 'returns a success response' do
      get :new, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      let(:params) { {game_match: {ruleset: :russian} }}

      it 'creates a new Match' do
        expect {
          post :create, params: params, session: valid_session
        }.to change(Game::Match, :count).by(1)
      end

      it 'redirects to the created match' do
        post :create, params: params, session: valid_session
        expect(response).to redirect_to(Game::Match.last)
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested match' do
      match = Game::Match.create!
      expect {
        delete :destroy, params: { id: match.to_param }, session: valid_session
      }.to change(Game::Match, :count).by(-1)
    end

    it 'redirects to the matches list' do
      match = Game::Match.create!
      delete :destroy, params: { id: match.to_param }, session: valid_session
      expect(response).to redirect_to(game_matches_url)
    end
  end

  describe 'POST #move' do
    let(:match) { Game::Match.create_initial_match }

    context 'with valid move' do
      let(:params) { { id: match.to_param, moves: [%w[C3 D4]] } }

      it 'updates the requested match' do
        expect {
          post :move, params: params, session: valid_session, as: :json
        }.to change { match.current_turn.reload.boards }
      end

      it 'sends match data to clients' do
        expect {
          post :move, params: params, session: valid_session, as: :json
        }.to have_broadcasted_to(match).from_channel(Game::MatchChannel)
      end
    end

    context 'with invalid move' do
      let(:params) { { id: match.to_param, moves: [%w[C3 E5]] } }

      it 'does not change match' do
        expect {
          post :move, params: params, session: valid_session, as: :json
        }.not_to change { match.current_turn.reload.boards }
      end
    end
  end
end
